C++

bool has_cycle(Node* head) {
    Node* fast = head;
    Node* slow = head;
    while(fast != NULL && slow != NULL && fast->next) {
        fast = fast->next->next;
        slow = slow->next;
        if(fast == slow) {
            return 1;
        }
    }
    
    return 0;
}




Java

boolean hasCycle(Node head) {
    Node fast = head;
    
    while(fast != null && fast.next != null) {
        fast = fast.next.next;
        head = head.next;
        
        if(head.equals(fast)) {
            return true;
        }
    }
    return false;
}



Python

def has_cycle(head):
    fast = head;
    
    while(fast != None and fast.next != None):
        fast = fast.next.next;
        head = head.next;
        
        if(head == fast):
            return True;
        
    return False;
